@page "/enroll-in-class"
@using static Podcast.Components.ListenTogether.ListenTogether
@implements IDisposable
@inject NavigationManager NavigationManager
@inject PlayerService PlayerService
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>Enroll in class</PageTitle>

<div class="containerPage listen-together">
    <div class="contentWrapper">

        <div class="listen-together-wrapper">
            <div class="listen-together-sidebar">
                <div class="titleWrapper">
                    <TitlePage Label="Enroll in new Class" />
                </div>

                <div class="listen-together-join-room-code">
                    <p>Enter the class number that your teacher gave you.</p>

                    <EditForm Model="@formModel" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />

                        <div class="roomCode__input">
                            <InputText @ref="inputRef" class="inputApp"
                                       @bind-Value="formModel.RoomCode"
                                       placeholder="Class Number" />
                            <ValidationSummary />
                        </div>

                        <button type="submit" class="buttonApp primary" title="Join room">
                            <span class="buttonApp-icon icon-listen-together"></span>
                            <span>Join class</span>
                        </button>
                    </EditForm>

                        <img class="listen-together-empty-room-image" src="_content/Podcast.Components/images/bot-wait.svg" alt="" />

                </div>
            </div>

           

        </div>

    </div>
</div>

@code {
    [Parameter]
    public Guid? EpisodeId { get; set; }

    [Parameter]
    public string? RoomCode { get; set; }

    private record FormModel()
    {
        [Required, Display(Name = "Room Code")] public string? RoomCode { get; set; }
    };

    private InputText? inputRef;
    private FormModel formModel = new();
    private void HandleValidSubmit()
    {
     
    }
    private void CreateRoom()
    {
        if (PlayerService.Episode != null)
        {
            NavigationManager.NavigateTo($"/listen-together/create/{PlayerService.Episode.Id}");
        }
    }

    private void JoinRoom(string roomCode)
    {
        if (roomCode != RoomCode)
        {
            NavigationManager.NavigateTo($"/listen-together/room/{roomCode}");
        }
    }

    private ListenTogether? listenTogetherRef;
    private bool canCreateRoom = false;
    private bool isUpdatingPlayer = false;

    protected override void OnInitialized()
    {
        PlayerService.EpisodeChanged += OnEpisodeChanged;
        PlayerService.TimeSought += OnCurrentTimeChanged;
        PlayerService.PlayingChanged += OnPlayingChanged;

        canCreateRoom = PlayerService.Episode != null;
    }

    public void Dispose()
    {
        PlayerService.EpisodeChanged -= OnEpisodeChanged;
        PlayerService.TimeSought -= OnCurrentTimeChanged;
        PlayerService.PlayingChanged -= OnPlayingChanged;
    }

    private async void OnEpisodeChanged(EpisodeInfo? episode)
    {
        canCreateRoom = episode != null;
        await InvokeAsync(StateHasChanged);
    }



    private void LeaveRoom()
    {
        NavigationManager.NavigateTo("/listen-together");
    }

    private void UpdatePlayer(RoomPlayerState playerState)
    {
        var (episode, progress, isPlaying) = playerState;
        isUpdatingPlayer = true;

        if (PlayerService.Episode?.Id != episode.Id)
        {
            var show = new ShowInfo(episode.Show.Id, episode.Show.Title, episode.Show.Author, episode.Show.Image);
            PlayerService.Episode = new EpisodeInfo(episode.Id, episode.Title, episode.Description, episode.Url, episode.Published, episode.Duration, show);
        }
        if (PlayerService.CurrentTime != progress.TotalSeconds)
        {
            PlayerService.SeekTime(progress.TotalSeconds);
        }
        if (isPlaying != PlayerService.IsPlaying)
        {
            PlayerService.IsPlaying = isPlaying;
        }
        isUpdatingPlayer = false;
    }

    private async void OnCurrentTimeChanged(double? _) => await UpdatePlayerState();
    private async void OnPlayingChanged(bool _) => await UpdatePlayerState();

    private async Task UpdatePlayerState()
    {
        if (!isUpdatingPlayer && listenTogetherRef != null && PlayerService.CurrentTime != null)
        {
            await listenTogetherRef.UpdateRoomPlayerState((long)PlayerService.CurrentTime, PlayerService.IsPlaying);
        }
    }
}
