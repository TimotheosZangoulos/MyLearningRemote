@page "/discover"

@inject PodcastService PodcastService
@inject PlayerService PlayerService
@inject SubscriptionsService SubscriptionsService
@inject PersistentComponentState ApplicationState

<PageTitle>.NET Podcasts - Discover</PageTitle>

<SearchBar OnSearch="@FetchShows" />

@if (groupedShows == null)
{
    <Spinner />
}
else
{
    <div class="containerPage containerPage--featured">
        @*if it is a parent have the names of their children *@
        @*<div class="categories">
            <NavLink href="categories" class="appLink" title="See all categories">
                See all categories
            </NavLink>
            <Tags Items="@topCategories" TItem="Category">
                <ItemTemplate Context="item">
                    <NavLink href="@($"category/{item.Id}")" title="@item.Genre">
                        @item.Genre
                    </NavLink>
                </ItemTemplate>
            </Tags>
        </div>*@

        @if (!groupedShows.Any())
        {
            <NoResults Message="Oops, no results found." Image="_content/Podcast.Components/images/empty-results.png" ShowDiscoverButton="false" />
        }
        else
        {
            foreach (var group in groupedShows)
            {
                <div class="titleWrapper">
                    <TitlePage Label="@group.Key" />
                </div>

                <Grid Items="@group.Value" TItem="Show">
                    <ItemTemplate Context="item">
                        @if (item.Title != "Add New Class")
                        {
                            <NavLink @key="item.Id" href="@($"course/{item.Id}")">
                                <ShowCard Id="@item.Id" Title="@item.Title" Author="@item.Author" Image="@item.Image" />
                            </NavLink>
                        } 
                        else
                        {
                            <NavLink @key="item.Id" href="@($"enroll-in-class")">
                                <ShowCard Id="@item.Id" Title="@item.Title" Author="" Image="@item.Image" />
                            </NavLink>
                        }

                    </ItemTemplate>
                 

                    <EmptyResults></EmptyResults>
                </Grid>
                

                

            }
        }
    </div>
}

@code {
    private const int MaxShows = 10;
    private const int MaxCategories = 5;

    //private Show[]? allShows;
    private List<Show>? allShows;
    private Dictionary<string, List<Show>>? groupedShows;
    private IEnumerable<Category>? topCategories;
    private PersistingComponentStateSubscription _persistingSubscription;

    protected override void OnInitialized()
    {
        Show s1 = new Show(Guid.NewGuid(), "Titile", "Course Name", "sdasd", "_content/Podcast.Components/images/future.png", DateTime.Now, "sadas", "", "", new List<Category> { new Category(Guid.NewGuid(), "") }, new List<Episode> { new Episode(Guid.NewGuid(), "", "", "", DateTime.Now, null, "") }, true);
        Show s2 = new Show(Guid.NewGuid(), "Titile", "Course Name", "sdasd", "_content/Podcast.Components/images/conflict.jpg", DateTime.Now, "sadas", "", "", new List<Category> { new Category(Guid.NewGuid(), "") }, new List<Episode> { new Episode(Guid.NewGuid(), "", "", "", DateTime.Now, null, "") }, true);
        
        allShows = new List<Show>();
        allShows.Add(s1);
        allShows.Add(s2);

        // only if it is a student or teacher
        Show s3 = new Show(Guid.NewGuid(), "Add New Class", "Course Name", "sdasd", "_content/Podcast.Components/images/addNew.svg", DateTime.Now, "sadas", "", "", new List<Category> { new Category(Guid.NewGuid(), "") }, new List<Episode> { new Episode(Guid.NewGuid(), "", "", "", DateTime.Now, null, "") }, true);

        allShows.Add(s3);
        groupedShows = new Dictionary<string, List<Show>>();

        groupedShows.Add("Your Classes", allShows);
    }

    //use for search classes
    private async Task FetchShows(string? searchValue = null)
    {
        var searchShows = await PodcastService.GetShows(MaxShows, searchValue);
       // UpdateGroupedShowsAndCategories(searchShows);

    }



 
}
